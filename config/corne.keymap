/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
    retro-tap;
};

&sk { quick-release; };

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        qlt: qlt {
            compatible = "zmk,behavior-hold-tap";
            label = "QLT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
            retro-tap;
        };
    };

    combos {
        compatible = "zmk,combos";

        Ctrl_Backspace {
            timeout-ms = <50>;
            layers = <0 1>;
            bindings = <&kp ENTER>;
            key-positions = <8 9>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <33 32>;
        };
    };

    macros {
        ctrl_backspace: ctrl_backspace {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_CONTROL>,
                <&macro_tap>,
                <&kp BACKSPACE>,
                <&macro_release>,
                <&kp RIGHT_CONTROL>;
        };

        Shift_enter: Shift_enter {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT &kp ENTER>;
        };

        ZMK_MACRO(

        Macros_a_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp A>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_e_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp E>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_i_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp I>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_o_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp O>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_u_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp U>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_a_grave,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp GRAVE>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp A>;

        )
        ZMK_MACRO(

        Macros_a_caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp NUMBER_6>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp A>;

        )
        ZMK_MACRO(

        Macros_e_caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp NUMBER_6>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp E>;

        )
        ZMK_MACRO(

        Macros_o_caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp NUMBER_6>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp O>;

        )
        ZMK_MACRO(

        Macros_a_tilde,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp TILDE>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp A>;

        )
        ZMK_MACRO(

        Macros_o_tilde,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp TILDE>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp O>;

        )
        ZMK_MACRO(

        Cedilha,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp COMMA>,
            <&macro_release>,
            <&kp RALT>;

        )
    };

    keymap {
        compatible = "zmk,keymap";

        Alpha {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Y           &kp C  &kp L           &kp M  &kp K         &kp Z               &kp F        &kp U          &lt 4 COMMA  &kp APOSTROPHE  &none
&none  &kp I           &kp S  &kp R           &kp T  &kp G         &kp P               &kp N        &kp E          &kp A        &kp O           &none
&none  &mt LEFT_ALT Q  &kp V  &kp W           &kp D  &kp J         &kp B               &kp H        &kp SEMICOLON  &kp DOT      &mt LEFT_ALT X  &none
                              &sk LEFT_SHIFT  &sl 1  &qlt 2 ESC    &mt LGUI BACKSPACE  &lt 3 SPACE  &sk LCTRL
            >;
        };

        Symbol {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp DOUBLE_QUOTES  &kp QUESTION   &kp MINUS     &kp GREATER_THAN  &kp TILDE    &kp GRAVE        &kp CARET        &Macros_u_acute  &Macros_a_caret  &Macros_o_caret  &none
&none  &Macros_i_acute    &kp AT         &kp EQUAL     &kp DLLR          &kp HASH     &kp AMPS         &kp STAR         &Macros_e_acute  &Macros_a_acute  &Macros_o_acute  &none
&none  &kp PIPE           &kp BACKSLASH  &Cedilha      &kp PERCENT       &kp PLUS     &Macros_a_grave  &kp EXCLAMATION  &Macros_e_caret  &Macros_a_tilde  &Macros_o_tilde  &none
                                         &kp LEFT_ALT  &kp LGUI          &sk RALT     &kp COLON        &kp SLASH        &kp UNDERSCORE
            >;
        };

        symnum {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &mo 4      &kp LS(LG(S))   &kp LG(C)         &kp LG(V)             &kp LC(X)     &kp SLASH      &kp PLUS               &kp DOT            &kp MINUS        &kp STAR  &none
&none  &kp N6     &kp N3          &kp N1            &kp N2                &kp N7        &kp N9         &kp N4                 &kp N0             &kp N5           &kp N8    &none
&none  &kp ENTER  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp DELETE    &kp SLASH      &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp TAB   &none
                                  &none             &none                 &none         &kp BACKSPACE  &kp SPACE              &kp COMMA
            >;
        };

        Nav {
            bindings = <
&none  &kp KP_NUM             &kp F1        &kp F2             &kp F3  &kp F10         &kp SCROLLLOCK   &kp PAGE_UP  &kp PAGE_DOWN  &none      &kp C_BRIGHTNESS_INC  &none
&none  &kp LEFT_GUI           &mt LCTRL F4  &mt LEFT_SHIFT F5  &kp F6  &kp F11         &kp PRINTSCREEN  &kp LEFT     &kp DOWN       &kp RIGHT  &kp UP                &none
&none  &mt LEFT_ALT CAPSLOCK  &kp F7        &kp F8             &kp F9  &kp F12         &kp INS          &kp END      &kp HOME       &kp C_PP   &kp C_BRIGHTNESS_DEC  &none
                                            &kp C_VOL_DN       &sl 4   &kp C_VOL_UP    &none            &none        &none
            >;
        };

        BLE {
            bindings = <
&none  &none       &none         &none         &none         &sys_reset     &sys_reset   &none  &none  &none  &none  &none
&none  &none       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &sys_reset     &none        &none  &none  &none  &none  &none
&none  &bt BT_CLR  &none         &none         &none         &bootloader    &bootloader  &none  &none  &none  &none  &none
                                 &none         &none         &none          &none        &none  &none
            >;
        };
    };
};
