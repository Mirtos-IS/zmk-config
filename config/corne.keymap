/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
    retro-tap;
};

/ {
    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Caps {
            timeout-ms = <50>;
            bindings = <&kp CAPSLOCK>;
            key-positions = <7 8 9>;
        };

        Ctrl_Backspace {
            timeout-ms = <50>;
            layers = <0 1>;
            bindings = <&kp ENTER>;
            key-positions = <8 9>;
        };
    };

    macros {
        ctrl_backspace: ctrl_backspace {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_CONTROL>,
                <&macro_tap>,
                <&kp BACKSPACE>,
                <&macro_release>,
                <&kp RIGHT_CONTROL>;
        };
        Shift_enter: Shift_enter {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&sk LEFT_SHIFT &kp ENTER>;
        };

        ZMK_MACRO(

        Macros_a_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
        )
        ZMK_MACRO(

        Macros_e_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
        )
        ZMK_MACRO(

        Macros_i_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
        )
        ZMK_MACRO(

        Macros_o_acute,
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
        )
        ZMK_MACRO(

        Macros_u_acute,
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
        )
        ZMK_MACRO(

        Macros_a_grave,
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
            <&kp A>;
        )
        ZMK_MACRO(

        Macros_a_caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
            <&kp A>;
        )

        Macros_e_caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
            <&kp E>;
        )

        Macros_o_caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
            <&kp O>;
        )

        Macros_a_tilde,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
            <&kp A>;
        )

        Macros_o_tilde,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
            <&kp O>;
        )

        Cedilha,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_tap>,
        )
    };

    keymap {
        compatible = "zmk,keymap";

        Alpha {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &none           &kp Y        &kp C           &kp L       &kp M      &kp K                                   &kp Z        &kp F          &kp U    &kp COMMA  &kp SINGLE_QUOTE   &none
  &none  &mt LEFT_GUI I  &mt LCTRL S    &mt LSHIFT R  &mt LALT T      &kp G                                   &kp P   &mt LALT N   &mt RSHIFT E  &mt RCTRL A   &mt RIGHT_GUI O   &none
  &none           &kp Q        &kp V           &kp W       &kp D      &kp J                                   &kp B        &kp H  &kp SEMICOLON      &kp DOT             &kp X   &none
                                      &sk LEFT_SHIFT       &sl 1  &lt 2 ESC          &mt LS(LC(LA(LGUI))) BACKSPACE  &lt 4 SPACE      &lt 3 TAB
            >;
        };

        Symbol {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &none        &kp SLASH  &kp QUESTION  &kp MINUS  &kp GREATER_THAN  &kp BACKSLASH                &kp GRAVE   &kp PLUS  &Macros_u_acute  &Macros_a_caret  &Macros_o_caret   &none
  &none  &Macros_i_acute        &kp AT  &kp EQUAL        &kp DOLLAR    &kp PERCENT                 &kp AMPS   &kp STAR  &Macros_e_acute  &Macros_a_acute  &Macros_o_acute   &none
  &none         &kp PIPE     &kp TILDE   &Cedilha          &kp HASH       &kp EXCL          &Macros_a_grave  &kp CARET  &Macros_e_caret  &Macros_a_tilde  &Macros_o_tilde   &none
                                        &kp LCTRL          &kp LGUI       &sk RALT                  &kp DEL  &kp SLASH   &kp UNDERSCORE
            >;
        };

        symnum {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &none       &kp A       &kp K_REDO         &kp K_COPY            &kp K_PASTE         &kp K_CUT               &kp STAR  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &kp MINUS   &none
  &none  &kp K_UNDO   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS     &kp LESS_THAN              &kp EQUAL  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_0   &none
  &none       &kp O  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN              &kp SLASH  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9     &kp PLUS   &none
                                                 &trans                 &trans            &trans          &kp BACKSPACE       &kp DOT     &kp COMMA
            >;
        };

        System {
            bindings = <
  &none  &trans  &kp K_MUTE    &kp K_VOL_DN      &kp C_VOL_UP  &kp SCROLLLOCK            &kp K_CUT  &kp F1  &kp F2  &kp F3  &kp F10   &none
  &none  &trans  &kp C_PREV      &kp C_NEXT  &kp K_PLAY_PAUSE  &kp KP_NUMLOCK           &kp K_COPY  &kp F4  &kp F5  &kp F6  &kp F11   &none
  &none  &trans      &trans    &kp C_BRI_DN      &kp C_BRI_UP      &kp INSERT          &kp K_PASTE  &kp F7  &kp F8  &kp F9  &kp F12   &none
                             &sk LEFT_SHIFT  &sk LEFT_CONTROL    &sk LEFT_ALT               &trans  &trans  &trans
            >;
        };

        Nav {
            bindings = <
  &none  &trans      &trans      &trans      &trans          &trans          &trans  &kp PAGE_UP  &kp PAGE_DOWN     &trans  &trans   &none
  &none  &trans      &trans      &trans      &trans          &trans          &trans     &kp LEFT       &kp DOWN  &kp RIGHT  &kp UP   &none
  &none  &trans  &bt BT_PRV  &bt BT_NXT  &bt BT_CLR          &trans          &trans      &kp END       &kp HOME     &trans  &trans   &none
                                 &trans      &trans  &kp LEFT_SHIFT          &trans       &trans         &trans
            >;
        };
    };
};
